     1                                  ;computes the operation (c-a)+(b-d)+d in unsigned representation
     2                                  
     3                                  bits 32
     4                                  
     5                                  global start
     6                                  extern exit
     7                                  import exit msvcrt.dll
     8                                  
     9                                  segment data use32 class=data
    10 00000000 0A                          a db 10
    11 00000001 3400                        b dw 52
    12 00000003 7A030000                    c dd 890
    13 00000007 1E00000000000000            d dq 30
    14                                  
    15                                  
    16                                  
    17                                  segment code use32 class=code
    18                                      start:
    19                                          
    20                                          ;c-a    
    21 00000000 A1[03000000]                    mov EAX, [c]        ;EAX=c
    22                                          
    23 00000005 8A1D[00000000]                  mov BL, [a]         ;BL=a
    24 0000000B B700                            mov BH, 0           ;converts BL to BX
    25 0000000D 66B90000                        mov CX, 0           ;converts BX to CX:BX. Now CX:BX=a
    26                                          
    27 00000011 6651                            push CX             ;pushes to the stack
    28 00000013 6653                            push BX             ;pushes to the stack
    29 00000015 5B                              pop EBX             ;EBX=a
    30                                          
    31 00000016 29D8                            sub EAX, EBX        ;EAX=c-a
    32 00000018 BA00000000                      mov EDX, 0          
    33                                          
    34                                          ;EDX:EAX=c-a
    35                                          
    36                                          
    37                                          
    38                                          ;b-d   b->word, d->qword 
    39 0000001D 668B1D[01000000]                mov BX, [b]         ;BX=b
    40 00000024 66B90000                        mov CX, 0           ;converts BX to CX:BX
    41                                          
    42 00000028 6651                            push CX
    43 0000002A 6653                            push BX
    44 0000002C 5B                              pop EBX             ;EBX=CX:BX=b
    45                                          
    46 0000002D B900000000                      mov ECX, 0          ;converts EBX to ECX:EBX=b
    47                                          
    48 00000032 2B1D[07000000]                  sub EBX, dword[d]   ;EBX=EBX-the low part of d
    49 00000038 1B0D[0B000000]                  sbb ECX, dword[d+4] ;ECX=ECX-the high part of d-CF
    50                                          
    51                                          ;ECX:EBX=b-d
    52                                          
    53                                          
    54                                          
    55                                          ;(c-a)+(b-d)
    56 0000003E 01D8                            add EAX, EBX
    57 00000040 11CA                            adc EDX, ECX    ;EDX:EAX=(c-a)+(b-d)
    58                                          
    59                                          
    60                                          ;add d
    61                                          
    62 00000042 0305[07000000]                  add EAX, dword[d]        
    63 00000048 1315[0B000000]                  adc EDX, dword[d+4]        ;EDX:EAX=(c-a)+(b-d)+d
    64                                          
    65                                          ;The final result is stored in EDX:EAX
    66                                          
    67 0000004E 6A00                        push dword 0
    68 00000050 FF15[00000000]              call [exit]
    69                                  
